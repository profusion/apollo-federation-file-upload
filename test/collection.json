{
	"info": {
		"_postman_id": "8465fa86-44c4-44fd-bfbc-da78a36b06e7",
		"name": "collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SimpleUpload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.simpleUpload).to.deep.equal({",
							"        'filename': 'upload1.txt',",
							"        'mimetype': 'text/plain',",
							"        'encoding': '7bit',",
							"        'content': 'upload1\\n',",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{ \"query\": \"mutation SingleUpload($f: Upload!) {simpleUpload(f: $f) {filename,mimetype,encoding,content}}\", \"variables\": {\"f\": null}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.f\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload1.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "SimpleUpload Chunked",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.simpleUploadChunked).to.deep.equal({",
							"        'filename': 'upload1.txt',",
							"        'mimetype': 'text/plain',",
							"        'encoding': '7bit',",
							"        'content': 'upload1\\n',",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{ \"query\": \"mutation SingleUploadChunked($f: Upload!) {simpleUploadChunked(f: $f) {filename,mimetype,encoding,content}}\", \"variables\": {\"f\": null}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.f\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload1.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "InputUpload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.simpleInput).to.deep.equal({",
							"        'filename': 'upload2.txt',",
							"        'mimetype': 'text/plain',",
							"        'encoding': '7bit',",
							"        'content': 'upload2\\n',",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\": \"mutation SimpleInputMutation($input: SimpleInput!) {simpleInput(input: $input) {filename,mimetype,encoding,content}}\", \"variables\": {\"input\": {\"str\": \"a string\", \"f\": null}}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.input.f\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload2.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "InputUpload Chunked",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.simpleInputChunked).to.deep.equal({",
							"        'filename': 'upload2.txt',",
							"        'mimetype': 'text/plain',",
							"        'encoding': '7bit',",
							"        'content': 'upload2\\n',",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\": \"mutation SimpleInputMutationChunked($input: SimpleInputChunked!) {simpleInputChunked(input: $input) {filename,mimetype,encoding,content}}\", \"variables\": {\"input\": {\"str\": \"a string\", \"f\": null}}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.input.f\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload2.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "NestedInputUpload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.nestedInput).to.deep.equal({",
							"        'filename': 'upload3.txt',",
							"        'mimetype': 'text/plain',",
							"        'encoding': '7bit',",
							"        'content': 'upload3\\n',",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\": \"mutation NestedInputMutation($input: NestedInput!) {nestedInput(input: $input) {filename,mimetype,encoding,content}}\", \"variables\": {\"input\": {\"str\": \"a string\", \"nested\": {\"str\": \"another str\", \"f\": null}}}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.input.nested.f\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload3.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "NestedInputUpload Chunked",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.nestedInputChunked).to.deep.equal({",
							"        'filename': 'upload3.txt',",
							"        'mimetype': 'text/plain',",
							"        'encoding': '7bit',",
							"        'content': 'upload3\\n',",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\": \"mutation NestedInputMutationChunked($input: NestedInputChunked!) {nestedInputChunked(input: $input) {filename,mimetype,encoding,content}}\", \"variables\": {\"input\": {\"str\": \"a string\", \"nested\": {\"str\": \"another str\", \"f\": null}}}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.input.nested.f\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload3.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "SimpleUploadArray",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.simpleUploadArray.length).to.equal(3)",
							"    resp.data.simpleUploadArray.forEach(function(e, idx) {",
							"       pm.expect(e).to.deep.equal({",
							"           'filename': 'upload' + (idx + 1) + '.txt',",
							"           'mimetype': 'text/plain',",
							"           'encoding': '7bit',",
							"           'content': 'upload' + (idx + 1) + '\\n',",
							"       });",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\": \"mutation SimpleUploadArray($arr: [Upload!]!, $arr2: [Int!]!) {simpleUploadArray(arr: $arr, arr2: $arr2) {filename,mimetype,encoding,content}}\", \"variables\": {\"arr\": [], \"arr2\": [1,2,3,4]}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.arr.0\"], \"1\": [\"variables.arr.1\"], \"2\": [\"variables.arr.2\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload1.txt"
						},
						{
							"key": "1",
							"type": "file",
							"src": "./test/upload2.txt"
						},
						{
							"key": "2",
							"type": "file",
							"src": "./test/upload3.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "SimpleUploadArray Chunked",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.simpleUploadArrayChunked.length).to.equal(3)",
							"    resp.data.simpleUploadArrayChunked.forEach(function(e, idx) {",
							"       pm.expect(e).to.deep.equal({",
							"           'filename': 'upload' + (idx + 1) + '.txt',",
							"           'mimetype': 'text/plain',",
							"           'encoding': '7bit',",
							"           'content': 'upload' + (idx + 1) + '\\n',",
							"       });",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\": \"mutation SimpleUploadArrayChunked($arr: [Upload!]!, $arr2: [Int!]!) {simpleUploadArrayChunked(arr: $arr, arr2: $arr2) {filename,mimetype,encoding,content}}\", \"variables\": {\"arr\": [], \"arr2\": [1,2,3,4]}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.arr.0\"], \"1\": [\"variables.arr.1\"], \"2\": [\"variables.arr.2\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload1.txt"
						},
						{
							"key": "1",
							"type": "file",
							"src": "./test/upload2.txt"
						},
						{
							"key": "2",
							"type": "file",
							"src": "./test/upload3.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "InputWithUploadArray",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.inputWithUploadArray.length).to.equal(4)",
							"    resp.data.inputWithUploadArray.forEach(function(e, idx) {",
							"       pm.expect(e).to.deep.equal({",
							"           'filename': 'upload' + (idx + 1) + '.txt',",
							"           'mimetype': 'text/plain',",
							"           'encoding': '7bit',",
							"           'content': 'upload' + (idx + 1) + '\\n',",
							"       });",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\": \"mutation InputWithUploadArray($input: InputWithUploadArray!, $input2: [NestedInput!]!) {inputWithUploadArray(input: $input, input2: $input2) {filename,mimetype,encoding,content}}\", \"variables\": {\"input2\": [{\"str\": \"str\", \"nested\": {\"str\": \"nested str\"}}], \"input\": {\"str\": \"a string\"}}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.input.files.0\"], \"1\": [\"variables.input.files.1\"], \"2\": [\"variables.input.files.2\"], \"3\": [\"variables.input2.0.nested.f\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload1.txt"
						},
						{
							"key": "1",
							"type": "file",
							"src": "./test/upload2.txt"
						},
						{
							"key": "2",
							"type": "file",
							"src": "./test/upload3.txt"
						},
						{
							"key": "3",
							"type": "file",
							"src": "./test/upload4.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "InputWithUploadArray Chunked",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data.inputWithUploadArrayChunked.length).to.equal(4)",
							"    resp.data.inputWithUploadArrayChunked.forEach(function(e, idx) {",
							"       pm.expect(e).to.deep.equal({",
							"           'filename': 'upload' + (idx + 1) + '.txt',",
							"           'mimetype': 'text/plain',",
							"           'encoding': '7bit',",
							"           'content': 'upload' + (idx + 1) + '\\n',",
							"       });",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\": \"mutation InputWithUploadArrayChunked($input: InputWithUploadArrayChunked!, $input2: [NestedInputChunked!]!) {inputWithUploadArrayChunked(input: $input, input2: $input2) {filename,mimetype,encoding,content}}\", \"variables\": {\"input2\": [{\"str\": \"str\", \"nested\": {\"str\": \"nested str\"}}], \"input\": {\"str\": \"a string\"}}}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\": [\"variables.input.files.0\"], \"1\": [\"variables.input.files.1\"], \"2\": [\"variables.input.files.2\"], \"3\": [\"variables.input2.0.nested.f\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"type": "file",
							"src": "./test/upload1.txt"
						},
						{
							"key": "1",
							"type": "file",
							"src": "./test/upload2.txt"
						},
						{
							"key": "2",
							"type": "file",
							"src": "./test/upload3.txt"
						},
						{
							"key": "3",
							"type": "file",
							"src": "./test/upload4.txt"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		},
		{
			"name": "CustomHeader",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('results', function() {",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.data).to.deep.equal({",
							"        'customLanguageHeader': 'pt-BR'",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{ \"query\": \"query { customLanguageHeader }\" }",
							"type": "default"
						},
						{
							"key": "map",
							"value": "{}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://localhost:{{PORT}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PORT}}"
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
